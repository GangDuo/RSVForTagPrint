<Window x:Class="RSVForTagPrint.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"  
        xmlns:prism="http://www.codeplex.com/prism"
        xmlns:vm="clr-namespace:RSVForTagPrint.ViewModels"
        xmlns:v="clr-namespace:RSVForTagPrint.Views"
        xmlns:local="clr-namespace:RSVForTagPrint"  
        Icon="../Resources/app.ico"
        Title="Cﾎﾟｯﾌﾟお好み印刷" Height="500" Width="200">
    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>

    <Window.Resources>
        <!-- サイズ2倍 -->
        <ScaleTransform x:Key="ScaleXY" ScaleX="2" ScaleY="2" />
        <!-- ベースのスタイル -->
        <Style x:Key="BaseStyle" TargetType="{x:Type FrameworkElement}">
            <Setter Property="LayoutTransform" Value="{StaticResource ScaleXY}" />
        </Style>
        <!-- コントロールのスタイル -->
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}" />
        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BaseStyle}" />
        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BaseStyle}" />
        <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource BaseStyle}" />
        <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource BaseStyle}" />
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseStyle}" />
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseStyle}" />
        <!--<Style TargetType="{x:Type Label}" BasedOn="{StaticResource BaseStyle}" />-->
    </Window.Resources>

    <i:Interaction.Triggers>
        <!-- InteractionRequestのRaisedイベントに対応するためのTrigger -->
        <prism:InteractionRequestTrigger SourceObject="{Binding NotificationRequest, Mode=OneWay}">
            <prism:PopupWindowAction IsModal="True"
                                    CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="ResizeMode" Value="NoResize"/>
                        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest, Mode=OneWay}">
            <prism:PopupWindowAction IsModal="True"
                                    CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowStyle>
                    <Style TargetType="Window">
                        <Setter Property="ResizeMode" Value="NoResize" />
                        <Setter Property="SizeToContent" Value="WidthAndHeight" />
                    </Style>
                </prism:PopupWindowAction.WindowStyle>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>
        <!-- オプション ウィンドウ -->
        <prism:InteractionRequestTrigger SourceObject="{Binding PreferenceNotificationRequest, Mode=OneWay}">
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True">
                <prism:PopupWindowAction.WindowContent>
                    <v:PreferenceWindow />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>

        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding WindowLoadedCommand}" />
        </i:EventTrigger>
        <!-- ViewModelにWindowが閉じることを通知する -->
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ClosingCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <i:Interaction.Behaviors>
        <!-- ApplicationCommands.Closeの動作を定義しているクラスを指定 -->
        <local:ApplicationCommandsBehavior />
    </i:Interaction.Behaviors>

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="ツール(_T)">
                <MenuItem Header="オプション(_O)" Command="{Binding OptionsCommand}"/> 
                <Separator />
                <MenuItem Header="終了(_X)" Command="ApplicationCommands.Close"/>
            </MenuItem>
        </Menu>

        <ScrollViewer VerticalScrollBarVisibility = "Auto">
            <StackPanel>
                <TextBox Text="{Binding Comment, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="GotKeyboardFocus" >
                            <i:InvokeCommandAction Command="{Binding GotKeyboardFocusCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
                <Button Content="印刷" Command="{Binding PrintCommand}" />

                <ProgressBar IsIndeterminate="True"
                         Visibility="{Binding ProgressVisibility, Converter={StaticResource BooleanToVisibilityConverter}}"
                         Height="20" />

                <Label Content="印刷履歴" HorizontalAlignment="Center" />
                <ListBox ItemsSource="{Binding Path=Histories}"
                         SelectedItem="{Binding SelectedItem, Mode=TwoWay}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Path=Comment}"/>
                                <TextBlock Text=" "/>
                                <TextBlock Text="{Binding Path=CreatedAt}"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
                <Button Content="再印刷" Command="{Binding RePrintCommand}" />
            </StackPanel>
        </ScrollViewer>
    </DockPanel>
</Window>
